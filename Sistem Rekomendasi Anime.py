# -*- coding: utf-8 -*-
"""Sistem_Rekomendasi_Sangat_Fix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PatckpdCbmOPG9RNIijAHT5Wex7e1OwW

# **Persiapan Dataset**

Mengunduh **KAGGLE_USERNAME** dan **KAGGLE_KEY** dari [kaggle](https://kaggle.com) beserta dengan dataset.

Pada kasus ini saya menggunakan dataset **Anime Recommendation Database 2020**.
"""

import os
os.environ['KAGGLE_USERNAME'] = "adipalguna"
os.environ['KAGGLE_KEY'] = "9d40f189cf57009c1cea3a0eea52b897"
!kaggle datasets download -d hernan4444/anime-recommendation-database-2020

"""Ekstrak file menggunakan library ***zipfile***."""

import zipfile

local_zip = '/content/anime-recommendation-database-2020.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

"""# **Data Understanding**

Mengubah dataset menjadi dataframe menggunakan library ***pandas***.
"""

import pandas as pd
 
anime = pd.read_csv('/content/anime.csv')
anime

"""Terdapat total 35 jenis variable pada dataset ini. Beberapa diantaranya yaitu:

* *MAL_ID*: *unique* ID yang mendefinisikan suatu anime
* *Name*: Judul dari suatu anime
* *Score*: Rata-rata penilaian dari suatu anime
* *Genres*: Genre dari suatu anime
* *English Name*: Judul anime dalam bahasa inggris
* *Japanese Name*: Judul anime dalam bahasa jepang
* *Type*: Tipe dari suatu anime (TV, *Movie*, dan lain-lain)
* *Episodes*: Jumlah episode dari suatu anime
* *Aired*: Rentang waktu penayangan dari suatu anime
* *Premiered*: Penayangan perdana dari suatu anime.

Melihat informasi dataset menggunakan fungsi ***info()***.
"""

anime.info()

"""Mengecek *missing value* atau nilai yang hilang pada dataset menggunakan fungsi ***isnull()*** dan ***sum***."""

anime.isnull().sum()

"""# **Univariate EDA**

Mengecek jumlah keseluruhan dan nilai *unique* pada variabel *MAL_ID*.
"""

print('Jumlah Anime berdasarkan MAL_ID: ', len(anime.MAL_ID.unique()))
print('anime_id:', anime.MAL_ID.unique())

"""Mengecek jumlah keseluruhan dan nilai *unique* pada variabel *Name*."""

print('Jumlah Anime berdasarkan Name: ', len(anime.Name.unique()))
print('Name:', anime.Name.unique())

"""Mengecek jumlah keseluruhan dan nilai *unique* pada variabel *Genres*."""

print('Jumlah Anime berdasarkan Genres: ', len(anime.Genres.unique()))
print('Genres:', anime.Genres.unique())

"""Import beberapa library seperti ***seaborn*** dan ***pyplot*** untuk melakukan Visualisasi Data pada variable *Genres*."""

import seaborn as sns
import matplotlib.pyplot as plt 
plt.style.use('ggplot')
import itertools
from collections import Counter 

anime.Genres = anime.Genres.fillna('None')
genre_anime = anime.Genres.apply(lambda x: x.split(', ')).values.tolist()
Genres = itertools.chain(*genre_anime)
genre_count = Counter(Genres)

genre_df = pd.DataFrame.from_dict(genre_count,orient='index').reset_index()
genre_df.columns = ["genre","count"]
genre_df = genre_df.sort_values('count', ascending=False)
plt.figure(figsize=(9,12))
sns.barplot(x=genre_df["count"], y=genre_df["genre"])

"""Berdasarkan hasil Visualisasi Data, dapat dilihat bahwa anime dengan genre Comedy memiliki jumlah terbanyak dibandingkan dengan genre lainnya.

Mengecek jumlah keseluruhan dan nilai *unique* pada variabel *Type*.
"""

print('Jumlah tipe pada variable Type: ', len(anime['Type'].unique()))
print('Type', anime['Type'].unique())

"""Mengecek jumlah keseluruhan dan nilai *unique* pada variabel *Episodes*."""

print('Jumlah akumulasi pada variable Episodes: ', len(anime.Episodes.unique()))
print('Episodes', anime.Episodes.unique())

"""Mengecek jumlah keseluruhan dan nilai *unique* pada variabel *Score*."""

print('Jumlah akumulasi pada variable Score: ', len(anime.Score.unique()))
print('Score', anime.Score.unique())

"""Mengecek jumlah keseluruhan dan nilai *unique* pada variabel *Members*."""

print('Jumlah akumulasi pada variable Members: ', len(anime.Members.unique()))
print('Members', anime.Members.unique())

"""# **Data Preparation**

Mengecek jumlah tipe *Music* pada variable *Type*.
"""

music = (anime['Type']=='Music').sum()
print(music)

"""*Drop* atau hilangkan variable *Music* pada variable *Type*."""

anime = anime.loc[(anime['Type']!='Music')]
anime.shape

"""*Drop* variable yang tidak diperlukan."""

anime = anime.drop(columns=['Score', 'English name', 'Japanese name', 'Type', 'Episodes', 'Aired', 'Premiered'])
anime.head()

anime = anime.drop(columns=['Producers', 'Licensors', 'Studios', 'Source', 'Duration', 'Rating', 'Ranked', 'Popularity', 'Members', 'Favorites'])
anime.head()

anime = anime.drop(columns=['Watching', 'Completed', 'On-Hold', 'Dropped', 'Plan to Watch', 'Score-10', 'Score-9', 'Score-8', 'Score-7', 'Score-6'])
anime.head()

anime = anime.drop(columns=['Score-5', 'Score-4', 'Score-3', 'Score-2', 'Score-1'])
anime.head()

"""Mengecek kembali dataframe."""

anime

"""*Drop* data yang sama berdasarkan *MAL_ID*"""

anime = anime.drop_duplicates('MAL_ID')
anime

"""# **One-Hot Encoding**

Membagi variabel *Genres* menjadi beberapa list.
"""

anime['Genres'] = anime['Genres'].str.split(',')
anime

"""**One-Hot Encoding** pada variable *Genres*."""

for index, row in anime.iterrows():
  for genre in row['Genres']:
    anime.at[index, genre] = 1

"""Memberi nilai 0 pada kolom yang bernilai kosong."""

anime_new = anime.fillna(0)
anime_new

"""*Drop* variable *MAL_ID* dan *Genres*."""

anime_new = anime_new.drop(columns=['MAL_ID', 'Genres'])
anime_new

"""# **Modeling**

Mengambil nilai yang menjadi genre pada dataframe.
"""

genre = anime_new.iloc[:,1:].values
genre.shape

"""Menghitung derajat kesamaan antar anime menggunakan library ***sklearn.metrics.pairwise*** yaitu ***cosine_similarity***."""

from sklearn.metrics.pairwise import cosine_similarity

cosine_sim = cosine_similarity(genre) 
cosine_sim

"""Membuat dataframe dari variable *similarity_check*.

Mengecek *Matrik Similarity* antar anime.
"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=anime_new['Name'], columns=anime_new['Name'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(10, axis=1).sample(10, axis=0)

"""# **Sistem Rekomendasi Anime**

Mengambil data anime dengan fungsi ***argpartition()*** untuk melakukan partisi.

Mengubah dataframe menjadi *numpy* dengan fungsi ***to_numpy()***.

Mengambil data anime dengan similarity terbesar dari index.

*Drop* variable *Name* dengan fungsi ***drop()***.
"""

def anime_recommendations(anime_name, anime_similarity=cosine_sim_df, items=anime[['Name', 'Genres']], k=10):
  index = anime_similarity.loc[:,anime_name].to_numpy().argpartition (
      range(-1, -k, -1))
  
  closest = anime_similarity.columns[index[-1:-(k+2):-1]]
  
  closest = closest.drop(anime_name, errors='ignore')
  
  return pd.DataFrame(closest).merge(items).head(k)

anime[anime.Name.eq('One Piece')]

"""Rekomendasi anime berdasarkan judul anime."""

anime_recommendations('One Piece')

"""Dapat dilihat bahwa rekomendasi anime yang diberikan bervariasi serta sesuai dengan genre. Hal ini membuktikan bahwa model rekomendasi yang dibuat sudah baik.

# **Evaluation**

Formula dari **Metrik Precission**:

Metrik Precission = (Total Prediksi Berdasarkan Genre yang Benar)/(Total Rekomendasi yang telah Diberikan)

Metrik Precission = (10 / 10) x 100%

Metrik Precission = 100%

Dapat dilihat dari seluruh rekomendasi yang diberikan terdapat judul-judul anime yang bervariasi dan relevan dengan anime yang menjadi rujukan. Hal ini membuktikan bahwa model sistem rekomendasi yang dibuat sudah bagus. Selain itu, dengan evaluasi menggunakan **Metrik Precission** didapat hasil rekomendasi yang optimal sebesar 100%.
"""